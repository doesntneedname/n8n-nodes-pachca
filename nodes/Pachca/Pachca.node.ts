import {
	IExecuteFunctions,
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
	NodeOperationError,
	NodeConnectionType,
} from 'n8n-workflow';

// –®–∞–±–ª–æ–Ω—ã —Ñ–æ—Ä–º –¥–ª—è Pachca
const FORM_TEMPLATES: { [key: string]: any } = {
	'timeoff_request': {
		title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—É—Å–∫–µ',
		close_text: '–ó–∞–∫—Ä—ã—Ç—å',
		submit_text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',
		blocks: [
			{
				type: 'plain_text',
				text: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –≤ –æ–±—â–∏–π —á–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.'
			},
			{
				type: 'header',
				text: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
			},
			{
				type: 'date',
				name: 'date_start',
				label: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞',
				required: true,
				hint: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞'
			},
			{
				type: 'date',
				name: 'date_end',
				label: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞',
				required: true,
				hint: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞'
			},
			{
				type: 'input',
				name: 'reason',
				label: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—É—Å–∫–∞',
				placeholder: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–ø—É—Å–∫–∞',
				multiline: true,
				hint: '–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
			},
			{
				type: 'divider'
			},
			{
				type: 'header',
				text: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
			},
			{
				type: 'radio',
				name: 'accessibility',
				label: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å–∫–∞',
				options: [
					{
						text: '–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
						value: 'unavailable',
						description: '–ù–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–≤–æ–Ω–∫–∏',
						checked: true
					},
					{
						text: '–¢–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω',
						value: 'phone_only',
						description: '–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ –∑–≤–æ–Ω–∫–∏'
					},
					{
						text: '–¢–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–æ—É—Ç–±—É–∫',
						value: 'phone_laptop',
						description: '–ë—É–¥—É –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
					}
				],
				required: true
			}
		]
	},
	'feedback_form': {
		title: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
		close_text: '–û—Ç–º–µ–Ω–∞',
		submit_text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
		blocks: [
			{
				type: 'plain_text',
				text: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–µ. –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.'
			},
			{
				type: 'header',
				text: '–û—Ü–µ–Ω–∫–∞'
			},
			{
				type: 'select',
				name: 'rating',
				label: '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞',
				options: [
					{ text: '‚≠ê –û—Ç–ª–∏—á–Ω–æ (5)', value: '5' },
					{ text: 'üëç –•–æ—Ä–æ—à–æ (4)', value: '4' },
					{ text: 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ (3)', value: '3' },
					{ text: 'üëé –ü–ª–æ—Ö–æ (2)', value: '2' },
					{ text: 'üí© –£–∂–∞—Å–Ω–æ (1)', value: '1' }
				],
				required: true,
				hint: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5'
			},
			{
				type: 'divider'
			},
			{
				type: 'header',
				text: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
			},
			{
				type: 'input',
				name: 'comment',
				label: '–í–∞—à –æ—Ç–∑—ã–≤',
				placeholder: '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å',
				multiline: true,
				required: true,
				hint: '–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ –¥–ª—è –Ω–∞—Å'
			},
			{
				type: 'checkbox',
				name: 'categories',
				label: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–∑—ã–≤–∞',
				options: [
					{
						text: '–†–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã',
						value: 'team_work',
						description: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ'
					},
					{
						text: '–ü—Ä–æ—Ü–µ—Å—Å—ã',
						value: 'processes',
						description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
					},
					{
						text: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
						value: 'tools',
						description: '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
					},
					{
						text: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
						value: 'communication',
						description: '–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è'
					}
				]
			}
		]
	},
	'task_request': {
		title: '–ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á–∏',
		close_text: '–û—Ç–º–µ–Ω–∞',
		submit_text: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É',
		blocks: [
			{
				type: 'plain_text',
				text: '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã. –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.'
			},
			{
				type: 'header',
				text: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
			},
			{
				type: 'input',
				name: 'title',
				label: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
				placeholder: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
				required: true,
				max_length: 100,
				hint: '–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤'
			},
			{
				type: 'input',
				name: 'description',
				label: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
				placeholder: '–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ',
				multiline: true,
				required: true,
				hint: '–í–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'
			},
			{
				type: 'divider'
			},
			{
				type: 'header',
				text: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å—Ä–æ–∫–∏'
			},
			{
				type: 'select',
				name: 'priority',
				label: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
				options: [
					{ text: 'üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', value: 'critical' },
					{ text: '‚ö° –í—ã—Å–æ–∫–∏–π', value: 'high' },
					{ text: 'üìã –û–±—ã—á–Ω—ã–π', value: 'normal', selected: true },
					{ text: 'üìå –ù–∏–∑–∫–∏–π', value: 'low' }
				],
				required: true
			},
			{
				type: 'date',
				name: 'due_date',
				label: '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
				hint: '–ö–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞'
			},
			{
				type: 'divider'
			},
			{
				type: 'header',
				text: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'
			},
			{
				type: 'input',
				name: 'assignee_emails',
				label: 'Email –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
				placeholder: 'user1@company.com, user2@company.com',
				hint: '–£–∫–∞–∂–∏—Ç–µ email –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
			},
			{
				type: 'select',
				name: 'team',
				label: '–ö–æ–º–∞–Ω–¥–∞',
				options: [
					{ text: 'Frontend', value: 'frontend' },
					{ text: 'Backend', value: 'backend' },
					{ text: 'Design', value: 'design' },
					{ text: 'QA', value: 'qa' },
					{ text: 'DevOps', value: 'devops' },
					{ text: 'Product', value: 'product' }
				]
			}
		]
	},
	'survey_form': {
		title: '–û–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
		close_text: '–û—Ç–º–µ–Ω–∞',
		submit_text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã',
		blocks: [
			{
				type: 'header',
				text: '–ê–Ω–∫–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
			},
			{
				type: 'plain_text',
				text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏.'
			},
			{
				type: 'radio',
				name: 'satisfaction',
				label: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ä–∞–±–æ—Ç–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏?',
				options: [
					{ text: '–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω', value: 'very_satisfied' },
					{ text: '–î–æ–≤–æ–ª–µ–Ω', value: 'satisfied' },
					{ text: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', value: 'neutral' },
					{ text: '–ù–µ –¥–æ–≤–æ–ª–µ–Ω', value: 'dissatisfied' },
					{ text: '–û—á–µ–Ω—å –Ω–µ –¥–æ–≤–æ–ª–µ–Ω', value: 'very_dissatisfied' }
				],
				required: true
			},
			{
				type: 'checkbox',
				name: 'improvements',
				label: '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å?',
				options: [
					{ text: '–ó–∞—Ä–ø–ª–∞—Ç–∞', value: 'salary' },
					{ text: '–†–∞–±–æ—á–∏–µ —É—Å–ª–æ–≤–∏—è', value: 'work_conditions' },
					{ text: '–ö–æ–º–∞–Ω–¥–∞', value: 'team' },
					{ text: '–ü—Ä–æ–µ–∫—Ç—ã', value: 'projects' },
					{ text: '–û–±—É—á–µ–Ω–∏–µ', value: 'training' },
					{ text: '–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç', value: 'career_growth' }
				]
			},
			{
				type: 'input',
				name: 'suggestions',
				label: '–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
				placeholder: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
				multiline: true
			}
		]
	},
	'access_request': {
		title: '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞',
		close_text: '–û—Ç–º–µ–Ω–∞',
		submit_text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
		blocks: [
			{
				type: 'header',
				text: '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º'
			},
			{
				type: 'input',
				name: 'employee_name',
				label: '–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
				placeholder: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
				required: true
			},
			{
				type: 'input',
				name: 'department',
				label: '–û—Ç–¥–µ–ª',
				placeholder: 'IT –æ—Ç–¥–µ–ª',
				required: true
			},
			{
				type: 'checkbox',
				name: 'access_types',
				label: '–¢–∏–ø –¥–æ—Å—Ç—É–ø–∞',
				options: [
					{ text: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞', value: 'email' },
					{ text: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã', value: 'internal_systems' },
					{ text: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', value: 'database' },
					{ text: '–§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä', value: 'file_server' },
					{ text: 'VPN –¥–æ—Å—Ç—É–ø', value: 'vpn' },
					{ text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞', value: 'admin_rights' }
				],
				required: true
			},
			{
				type: 'date',
				name: 'access_start',
				label: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç—É–ø–∞',
				required: true
			},
			{
				type: 'date',
				name: 'access_end',
				label: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞'
			},
			{
				type: 'input',
				name: 'justification',
				label: '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ',
				placeholder: '–û–±—ä—è—Å–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞',
				multiline: true,
				required: true
			},
			{
				type: 'file_input',
				name: 'approval_doc',
				label: '–î–æ–∫—É–º–µ–Ω—Ç-–æ—Å–Ω–æ–≤–∞–Ω–∏–µ',
				filetypes: ['pdf', 'doc', 'docx'],
				max_files: 1,
				hint: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞'
			}
		]
	}
};

// –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º
const FORM_VALIDATION_RULES: { [key: string]: any } = {
	timeoff_request: {
		date_end: (value: string, formData: any) => {
			if (new Date(value) <= new Date(formData.date_start)) {
				return '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞';
			}
			return null;
		}
	},
	feedback_form: {
		comment: (value: string) => {
			if (value && value.length < 10) {
				return '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
			}
			return null;
		}
	},
	custom_form: {
		text: (value: string) => {
			if (!value || value.trim().length === 0) {
				return '–ü–æ–ª–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
			}
			return null;
		}
	},
	task_request: {
		title: (value: string) => {
			if (value && value.length < 5) {
				return '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤';
			}
			return null;
		},
		description: (value: string) => {
			if (value && value.length < 20) {
				return '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤';
			}
			return null;
		}
	}
};

export class Pachca implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Pachca',
		name: 'pachca',
		icon: 'file:Pachca_white_mark.png',
		group: ['transform'],
		version: 1,
		subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
		description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º –ü–∞—á–∫–∞',
		defaults: {
			name: 'Pachca',
		},
		inputs: [NodeConnectionType.Main],
		outputs: [NodeConnectionType.Main],
		credentials: [
			{
				name: 'pachcaApi',
				required: true,
			},
		],
		requestDefaults: {
			baseURL: '={{$credentials.baseUrl}}',
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
			},
		},
		properties: [
			{
				displayName: 'Resource',
				name: 'resource',
				type: 'options',
				noDataExpression: true,
				options: [
					{
						name: 'Message',
						value: 'message',
					},
					{
						name: 'Thread',
						value: 'thread',
					},
					{
						name: 'Reactions',
						value: 'reactions',
					},
					{
						name: 'Chat',
						value: 'chat',
					},
					{
						name: 'User',
						value: 'user',
					},
					{
						name: 'Group Tag',
						value: 'groupTag',
					},
					{
						name: 'Status',
						value: 'status',
					},
					{
						name: 'Custom Fields',
						value: 'customFields',
					},
					{
						name: 'Task',
						value: 'task',
					},
					{
						name: 'Bot',
						value: 'bot',
					},
					{
						name: 'File',
						value: 'file',
					},
					{
						name: 'Form',
						value: 'form',
					},
				],
				default: 'message',
			},
			// User operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['user'],
					},
				},
				options: [
					{
						name: 'Get all users',
						value: 'getAll',
						action: 'Get all users',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
					},
					{
						name: 'Get a user',
						value: 'getById',
						action: 'Get a user',
						description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID',
					},
					{
						name: 'Create a user',
						value: 'create',
						action: 'Create a user',
						description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Admin/Owner —Ç–æ–∫–µ–Ω–æ–≤)',
					},
					{
						name: 'Update a user',
						value: 'update',
						action: 'Update a user',
						description: '–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Admin/Owner —Ç–æ–∫–µ–Ω–æ–≤)',
					},
					{
						name: 'Delete a user',
						value: 'delete',
						action: 'Delete a user',
						description: '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Admin/Owner —Ç–æ–∫–µ–Ω–æ–≤)',
					},
				],
				default: 'getAll',
			},
			// Message operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['message'],
					},
				},
				options: [
					{
						name: 'Send a message',
						value: 'send',
						action: 'Send a message',
						description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
					},
					{
						name: 'Get a message',
						value: 'getById',
						action: 'Get a message',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID',
					},
					{
						name: 'Get messages from a chat',
						value: 'getAll',
						action: 'Get messages from a chat',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞',
					},
					{
						name: 'Update a message',
						value: 'update',
						action: 'Update a message',
						description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
					},
					{
						name: 'Delete a message',
						value: 'delete',
						action: 'Delete a message',
						description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è Admin/Owner —Ç–æ–∫–µ–Ω–æ–≤)',
					},
					{
						name: 'Pin a message',
						value: 'pin',
						action: 'Pin a message',
						description: '–ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
					},
					{
						name: 'Unpin a message',
						value: 'unpin',
						action: 'Unpin a message',
						description: '–û—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
					},
					{
						name: 'Get message readers',
						value: 'getReadMembers',
						action: 'Get message readers',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ',
					},
					{
						name: 'Unfurl message links',
						value: 'unfurl',
						action: 'Unfurl message links',
						description: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (unfurl)',
					},
				],
				default: 'send',
			},
			// Chat operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['chat'],
					},
				},
				options: [
					{
						name: 'Get all chats',
						value: 'getAll',
						action: 'Get all chats',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤',
					},
					{
						name: 'Get a chat',
						value: 'getById',
						action: 'Get a chat',
						description: '–ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ ID',
					},
					{
						name: 'Create a chat',
						value: 'create',
						action: 'Create a chat',
						description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç',
					},
					{
						name: 'Update a chat',
						value: 'update',
						action: 'Update a chat',
						description: '–û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç',
					},
					{
						name: 'Archive a chat',
						value: 'archive',
						action: 'Archive a chat',
						description: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç',
					},
					{
						name: 'Unarchive a chat',
						value: 'unarchive',
						action: 'Unarchive a chat',
						description: '–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç',
					},
					{
						name: 'Get chat members',
						value: 'getMembers',
						action: 'Get chat members',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞',
					},
					{
						name: 'Add users to chat',
						value: 'addUsers',
						action: 'Add users to chat',
						description: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç',
					},
					{
						name: 'Remove user from chat',
						value: 'removeUser',
						action: 'Remove user from chat',
						description: '–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞',
					},
					{
						name: 'Update user role in chat',
						value: 'updateRole',
						action: 'Update user role in chat',
						description: '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ',
					},
					{
						name: 'Leave a chat',
						value: 'leaveChat',
						action: 'Leave a chat',
						description: '–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞',
					},
				],
				default: 'getAll',
			},
			// Group Tag operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['groupTag'],
					},
				},
				options: [
					{
						name: 'Get all group tags',
						value: 'getAll',
						action: 'Get all group tags',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç–µ–≥–æ–≤',
					},
					{
						name: 'Get a group tag',
						value: 'getById',
						action: 'Get a group tag',
						description: '–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–µ–≥ –ø–æ ID',
					},
					{
						name: 'Create a group tag',
						value: 'create',
						action: 'Create a group tag',
						description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–µ–≥',
					},
					{
						name: 'Update a group tag',
						value: 'update',
						action: 'Update a group tag',
						description: '–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–µ–≥',
					},
					{
						name: 'Delete a group tag',
						value: 'delete',
						action: 'Delete a group tag',
						description: '–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–µ–≥',
					},
					{
						name: 'Get users in group tag',
						value: 'getUsers',
						action: 'Get users in group tag',
						description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ç–µ–≥–µ',
					},
					{
						name: 'Add tags to chat',
						value: 'addTags',
						action: 'Add tags to chat',
						description: '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –≤ —á–∞—Ç',
					},
					{
						name: 'Remove tag from chat',
						value: 'removeTag',
						action: 'Remove tag from chat',
						description: '–ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–≥ –∏–∑ —á–∞—Ç–∞',
					},
				],
				default: 'getAll',
			},
			// File operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['file'],
					},
				},
				options: [
					{
						name: 'Upload a file',
						value: 'upload',
						action: 'Upload a file',
						description: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (–ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ + –∑–∞–≥—Ä—É–∑–∫–∞)',
					},
				],
				default: 'upload',
			},
			// Custom Fields operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['customFields'],
					},
				},
				options: [
					{
						name: 'Get custom properties',
						value: 'getCustomProperties',
						action: 'Get custom properties',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏',
					},
				],
				default: 'getCustomProperties',
			},
			// Task operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['task'],
					},
				},
				options: [
					{
						name: 'Create a task',
						value: 'create',
						action: 'Create a task',
						description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
					},
				],
				default: 'create',
			},
			// Bot operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['bot'],
					},
				},
				options: [
					{
						name: 'Update a bot',
						value: 'update',
						action: 'Update a bot',
						description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
					},
				],
				default: 'update',
			},
			// Status operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['status'],
					},
				},
				options: [
					{
						name: 'Get my profile',
						value: 'getProfile',
						action: 'Get my profile',
						description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ',
					},
					{
						name: 'Get my status',
						value: 'getStatus',
						action: 'Get my status',
						description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º —Å—Ç–∞—Ç—É—Å–µ',
					},
					{
						name: 'Set my status',
						value: 'updateStatus',
						action: 'Set my status',
						description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å',
					},
					{
						name: 'Clear my status',
						value: 'deleteStatus',
						action: 'Clear my status',
						description: '–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å',
					},
				],
				default: 'getProfile',
			},
			// Reactions operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['reactions'],
					},
				},
				options: [
					{
						name: 'Add a reaction',
						value: 'addReaction',
						action: 'Add a reaction',
						description: '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ',
					},
					{
						name: 'Remove a reaction',
						value: 'deleteReaction',
						action: 'Remove a reaction',
						description: '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è',
					},
					{
						name: 'Get message reactions',
						value: 'getReactions',
						action: 'Get message reactions',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ',
					},
				],
				default: 'addReaction',
			},
			// Thread operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['thread'],
					},
				},
				options: [
					{
						name: 'Create a thread',
						value: 'createThread',
						action: 'Create a thread',
						description: '–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é',
					},
					{
						name: 'Get a thread',
						value: 'getThread',
						action: 'Get a thread',
						description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–¥–µ',
					},
				],
				default: 'createThread',
			},
			// Form operations
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				noDataExpression: true,
				displayOptions: {
					show: {
						resource: ['form'],
					},
				},
				options: [
					{
						name: 'Create a form',
						value: 'createView',
						action: 'Create a form',
						description: '–°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π',
					},
					{
						name: 'Process form submission',
						value: 'processSubmission',
						action: 'Process form submission',
						description: '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç',
					},
					{
						name: 'Get form templates',
						value: 'getTemplates',
						action: 'Get form templates',
						description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–æ—Ä–º',
					},
				],
				default: 'createView',
			},
			// Message parameters
			{
				displayName: 'Entity Type',
				name: 'entityType',
				type: 'options',
				options: [
					{
						name: 'Discussion',
						value: 'discussion',
						description: '–ë–µ—Å–µ–¥–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª',
					},
					{
						name: 'User',
						value: 'user',
						description: '–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
					},
					{
						name: 'Thread',
						value: 'thread',
						description: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç—Ä–µ–¥–µ',
					},
				],
				default: 'discussion',
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['send'],
					},
				},
				description: '–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
			},
			{
				displayName: 'Entity ID',
				name: 'entityId',
				type: 'number',
				default: '',
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['send'],
					},
				},
				description: 'ID —á–∞—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç—Ä–µ–¥–∞',
			},
			{
				displayName: 'Content',
				name: 'content',
				type: 'string',
				typeOptions: {
					rows: 4,
				},
				default: '',
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['send', 'update'],
					},
				},
				description: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
			},
			{
				displayName: 'Buttons',
				name: 'buttons',
				type: 'fixedCollection',
				typeOptions: {
					multipleValues: true,
				},
				default: [],
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['send'],
					}
				},
				options: [
					{
						name: 'buttonRow',
						displayName: 'Button Row',
						values: [
							{
								displayName: 'Button Text',
								name: 'text',
								type: 'string',
								default: '',
								description: '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏'
							},
							{
								displayName: 'Button Type',
								name: 'type',
								type: 'options',
								options: [
									{
										name: 'Data Button (for forms)',
										value: 'data'
									},
									{
										name: 'URL Button',
										value: 'url'
									}
								],
								default: 'data'
							},
							{
								displayName: 'Data Value',
								name: 'data',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['data']
									}
								},
								description: '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Data-–∫–Ω–æ–ø–∫–∏ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≤–µ–±—Ö—É–∫–µ)'
							},
							{
								displayName: 'URL',
								name: 'url',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['url']
									}
								},
								description: 'URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞'
							}
						]
					}
				],
				description: '–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (Data-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–æ—Ä–º, URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫)'
			},
			{
				displayName: 'Message ID',
				name: 'messageId',
				type: 'number',
				default: '',
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['getById', 'update', 'delete', 'pin', 'unpin', 'getReadMembers'],
					},
				},
				description: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è',
			},
			{
				displayName: 'Chat ID',
				name: 'chatId',
				type: 'number',
				default: '',
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['getAll'],
					},
				},
				description: 'ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π',
			},
			{
				displayName: 'Per Page',
				name: 'per',
				type: 'number',
				default: 25,
				displayOptions: {
					show: {
						resource: ['message', 'user', 'chat', 'groupTag', 'customFields'],
						operation: ['getAll', 'getUsers'],
					},
				},
				description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–∞–∫—Å–∏–º—É–º 50)',
			},
			{
				displayName: 'Page',
				name: 'page',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['message', 'user', 'chat', 'groupTag', 'customFields'],
						operation: ['getAll', 'getUsers'],
					},
				},
				description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
			},
			// User parameters
			{
				displayName: 'User ID',
				name: 'userId',
				type: 'number',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['getById', 'update', 'delete'],
					},
				},
				default: 1,
				description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			{
				displayName: 'Email',
				name: 'email',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			{
				displayName: 'First Name',
				name: 'firstName',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			{
				displayName: 'Last Name',
				name: 'lastName',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			{
				displayName: 'Query',
				name: 'query',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['getAll'],
					},
				},
				default: '',
				description: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
			},
			{
				displayName: 'Nickname',
				name: 'nickname',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (nickname)',
			},
			{
				displayName: 'Phone Number',
				name: 'phoneNumber',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
			},
			{
				displayName: 'Department',
				name: 'department',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç',
			},
			{
				displayName: 'Title',
				name: 'title',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
			},
			{
				displayName: 'Role',
				name: 'role',
				type: 'options',
				options: [
					{
						name: 'Admin',
						value: 'admin',
						description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
					},
					{
						name: 'User',
						value: 'user',
						description: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
					},
					{
						name: 'Multi Guest',
						value: 'multi_guest',
						description: '–ú—É–ª—å—Ç–∏-–≥–æ—Å—Ç—å',
					},
				],
				default: 'user',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				description: '–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞',
			},
			{
				displayName: 'Suspended',
				name: 'suspended',
				type: 'boolean',
				default: false,
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['update'],
					},
				},
				description: '–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			{
				displayName: 'List Tags',
				name: 'listTags',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				description: '–¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)',
			},
			{
				displayName: 'Custom Properties',
				name: 'customProperties',
				type: 'fixedCollection',
				typeOptions: {
					multipleValues: true,
				},
				default: {},
				displayOptions: {
					show: {
						resource: ['user'],
						operation: ['create', 'update'],
					},
				},
				options: [
					{
						name: 'property',
						displayName: 'Property',
						values: [
							{
								displayName: 'Field ID',
								name: 'id',
								type: 'number',
								default: 0,
								description: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è',
							},
							{
								displayName: 'Value',
								name: 'value',
								type: 'string',
								default: '',
								description: '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è',
							},
						],
					},
				],
				description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			// Chat parameters
			{
				displayName: 'Chat ID',
				name: 'chatId',
				type: 'number',
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['getById', 'update', 'archive', 'unarchive', 'getMembers', 'addUsers', 'removeUser', 'updateRole', 'leaveChat'],
					},
				},
				default: 1,
				description: 'ID —á–∞—Ç–∞',
			},
			{
				displayName: 'Chat Name',
				name: 'chatName',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞',
			},
			{
				displayName: 'Channel',
				name: 'channel',
				type: 'boolean',
				default: false,
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['create'],
					},
				},
				description: '–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª (true) –∏–ª–∏ –±–µ—Å–µ–¥—É (false)',
			},
			{
				displayName: 'Public',
				name: 'public',
				type: 'boolean',
				default: false,
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['create'],
					},
				},
				description: '–û—Ç–∫—Ä—ã—Ç—ã–π (true) –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–π (false) –¥–æ—Å—Ç—É–ø',
			},
			{
				displayName: 'Per Page',
				name: 'per',
				type: 'number',
				default: 25,
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['getAll'],
					},
				},
				description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–∞–∫—Å–∏–º—É–º 50)',
			},
			{
				displayName: 'Page',
				name: 'page',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['getAll'],
					},
				},
				description: '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
			},
			// Chat Members parameters
			{
				displayName: 'Role',
				name: 'role',
				type: 'options',
				options: [
					{
						name: 'All',
						value: 'all',
						description: '–õ—é–±–∞—è —Ä–æ–ª—å',
					},
					{
						name: 'Owner',
						value: 'owner',
						description: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
					},
					{
						name: 'Admin',
						value: 'admin',
						description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
					},
					{
						name: 'Editor',
						value: 'editor',
						description: '–†–µ–¥–∞–∫—Ç–æ—Ä',
					},
					{
						name: 'Member',
						value: 'member',
						description: '–£—á–∞—Å—Ç–Ω–∏–∫/–ø–æ–¥–ø–∏—Å—á–∏–∫',
					},
				],
				default: 'all',
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['getMembers'],
					},
				},
				description: '–†–æ–ª—å –≤ —á–∞—Ç–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
			},
			{
				displayName: 'Limit',
				name: 'limit',
				type: 'number',
				default: 50,
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['getMembers'],
					},
				},
				description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50)',
			},
			{
				displayName: 'Cursor',
				name: 'cursor',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['getMembers'],
					},
				},
				description: '–ö—É—Ä—Å–æ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∏–∑ meta.paginate.next_page)',
			},
			{
				displayName: 'Member IDs',
				name: 'memberIds',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['addUsers'],
					},
				},
				description: '–ú–∞—Å—Å–∏–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 186,187)',
			},
			{
				displayName: 'Silent',
				name: 'silent',
				type: 'boolean',
				default: false,
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['addUsers'],
					},
				},
				description: '–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
			},
			{
				displayName: 'User ID',
				name: 'userId',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['removeUser', 'updateRole'],
					},
				},
				description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			{
				displayName: 'New Role',
				name: 'newRole',
				type: 'options',
				options: [
					{
						name: 'Admin',
						value: 'admin',
						description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
					},
					{
						name: 'Editor',
						value: 'editor',
						description: '–†–µ–¥–∞–∫—Ç–æ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)',
					},
					{
						name: 'Member',
						value: 'member',
						description: '–£—á–∞—Å—Ç–Ω–∏–∫/–ø–æ–¥–ø–∏—Å—á–∏–∫',
					},
				],
				default: 'member',
				displayOptions: {
					show: {
						resource: ['chat'],
						operation: ['updateRole'],
					},
				},
				description: '–ù–æ–≤–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			},
			// Group Tag parameters
			{
				displayName: 'Group Tag ID',
				name: 'groupTagId',
				type: 'number',
				displayOptions: {
					show: {
						resource: ['groupTag'],
						operation: ['getById', 'update', 'delete', 'getUsers', 'removeTag'],
					},
				},
				default: 1,
				description: 'ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç–µ–≥–∞',
			},
			{
				displayName: 'Group Tag Name',
				name: 'groupTagName',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['groupTag'],
						operation: ['create', 'update'],
					},
				},
				default: '',
				description: '–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç–µ–≥–∞',
			},
			{
				displayName: 'Group Tag Color',
				name: 'groupTagColor',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['groupTag'],
						operation: ['create', 'update'],
					},
				},
				default: '#000000',
				description: '–¶–≤–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç–µ–≥–∞ (hex –∫–æ–¥)',
			},
			{
				displayName: 'Chat ID',
				name: 'groupTagChatId',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['groupTag'],
						operation: ['addTags', 'removeTag'],
					},
				},
				description: 'ID —á–∞—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–≥–∞–º–∏',
			},
			{
				displayName: 'Group Tag IDs',
				name: 'groupTagIds',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['groupTag'],
						operation: ['addTags'],
					},
				},
				description: '–ú–∞—Å—Å–∏–≤ ID —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 86,18)',
			},
			{
				displayName: 'Tag ID',
				name: 'tagId',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['groupTag'],
						operation: ['removeTag'],
					},
				},
				description: 'ID —Ç–µ–≥–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è',
			},
			// File parameters
			{
				displayName: 'File Source',
				name: 'fileSource',
				type: 'options',
				options: [
					{
						name: 'URL',
						value: 'url',
						description: '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ URL',
					},
					{
						name: 'Binary Data',
						value: 'binary',
						description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É–∑–ª–∞',
					},
				],
				default: 'url',
				displayOptions: {
					show: {
						resource: ['file'],
						operation: ['upload'],
					},
				},
				description: '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏',
			},
			{
				displayName: 'File URL',
				name: 'fileUrl',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['file'],
						operation: ['upload'],
						fileSource: ['url'],
					},
				},
				default: '',
				description: 'URL —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Pachca',
			},
			{
				displayName: 'Binary Property',
				name: 'binaryProperty',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['file'],
						operation: ['upload'],
						fileSource: ['binary'],
					},
				},
				default: 'data',
				description: '–ò–º—è —Å–≤–æ–π—Å—Ç–≤–∞ —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É–∑–ª–∞',
			},
			{
				displayName: 'File Name',
				name: 'fileName',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['file'],
						operation: ['upload'],
					},
				},
				default: '',
				description: '–ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –≤–∑—è—Ç–æ –∏–∑ URL –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)',
			},
			{
				displayName: 'Content Type',
				name: 'contentType',
				type: 'string',
				displayOptions: {
					show: {
						resource: ['file'],
						operation: ['upload'],
					},
				},
				default: 'application/octet-stream',
				description: 'MIME —Ç–∏–ø —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)',
			},
			// Field parameters
			{
				displayName: 'Entity Type',
				name: 'entityType',
				type: 'options',
				options: [
					{
						name: 'User',
						value: 'User',
						description: '–£—á–∞—Å—Ç–Ω–∏–∫',
					},
					{
						name: 'Task',
						value: 'Task',
						description: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
					},
				],
				default: 'User',
				displayOptions: {
					show: {
						resource: ['customFields'],
						operation: ['getCustomProperties'],
					},
				},
				description: '–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π',
			},
			// Task parameters
			{
				displayName: 'Task Kind',
				name: 'taskKind',
				type: 'options',
				options: [
					{
						name: 'Call',
						value: 'call',
						description: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É',
					},
					{
						name: 'Meeting',
						value: 'meeting',
						description: '–í—Å—Ç—Ä–µ—á–∞',
					},
					{
						name: 'Reminder',
						value: 'reminder',
						description: '–ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
					},
					{
						name: 'Event',
						value: 'event',
						description: '–°–æ–±—ã—Ç–∏–µ',
					},
					{
						name: 'Email',
						value: 'email',
						description: '–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ',
					},
				],
				default: 'reminder',
				displayOptions: {
					show: {
						resource: ['task'],
						operation: ['create'],
					},
				},
				description: '–¢–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
			},
			{
				displayName: 'Content',
				name: 'taskContent',
				type: 'string',
				typeOptions: {
					rows: 3,
				},
				default: '',
				displayOptions: {
					show: {
						resource: ['task'],
						operation: ['create'],
					},
				},
				description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞)',
			},
			{
				displayName: 'Due At',
				name: 'taskDueAt',
				type: 'dateTime',
				default: '',
				displayOptions: {
					show: {
						resource: ['task'],
						operation: ['create'],
					},
				},
				description: '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (ISO-8601 —Ñ–æ—Ä–º–∞—Ç)',
			},
			{
				displayName: 'Priority',
				name: 'taskPriority',
				type: 'options',
				options: [
					{
						name: 'Normal',
						value: 1,
						description: '–û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
					},
					{
						name: 'Important',
						value: 2,
						description: '–í–∞–∂–Ω–æ',
					},
					{
						name: 'Very Important',
						value: 3,
						description: '–û—á–µ–Ω—å –≤–∞–∂–Ω–æ',
					},
				],
				default: 1,
				displayOptions: {
					show: {
						resource: ['task'],
						operation: ['create'],
					},
				},
				description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
			},
			{
				displayName: 'Performer IDs',
				name: 'performerIds',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['task'],
						operation: ['create'],
					},
				},
				description: 'ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∞–∑–Ω–∞—á–∞–µ—Ç–µ—Å—å –≤—ã)',
			},
			{
				displayName: 'Custom Properties',
				name: 'customProperties',
				type: 'fixedCollection',
				typeOptions: {
					multipleValues: true,
				},
				default: [],
				displayOptions: {
					show: {
						resource: ['task'],
						operation: ['create'],
					},
				},
				options: [
					{
						name: 'property',
						displayName: 'Property',
						values: [
							{
								displayName: 'Field ID',
								name: 'id',
								type: 'number',
								default: 0,
								description: 'ID –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è',
							},
							{
								displayName: 'Value',
								name: 'value',
								type: 'string',
								default: '',
								description: '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è',
							},
						],
					},
				],
				description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
			},
			// Bot parameters
			{
				displayName: 'Bot ID',
				name: 'botId',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['bot'],
						operation: ['update'],
					},
				},
				description: 'ID –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
			},
			{
				displayName: 'Webhook URL',
				name: 'webhookUrl',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['bot'],
						operation: ['update'],
					},
				},
				description: 'URL –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞',
			},
			{
				displayName: 'Per Page',
				name: 'readMembersPer',
				type: 'number',
				default: 300,
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['getReadMembers'],
					},
				},
				description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å–∏–º—É–º 300)',
			},
			{
				displayName: 'Page',
				name: 'readMembersPage',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['getReadMembers'],
					},
				},
				description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–≤—à–∏—Ö',
			},
			// Link Preview parameters
			{
				displayName: 'Message ID',
				name: 'messageId',
				type: 'number',
				default: '',
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['unfurl'],
					},
				},
				description: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Å—ã–ª–æ–∫ (unfurl)',
			},
			{
				displayName: 'Link Previews',
				name: 'linkPreviews',
				type: 'fixedCollection',
				typeOptions: {
					multipleValues: true,
				},
				default: {},
				displayOptions: {
					show: {
						resource: ['message'],
						operation: ['unfurl'],
					},
				},
				options: [
					{
						name: 'preview',
						displayName: 'Preview',
						values: [
							{
								displayName: 'URL',
								name: 'url',
								type: 'string',
								default: '',
								description: 'URL —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (unfurl)',
								required: true,
							},
							{
								displayName: 'Title',
								name: 'title',
								type: 'string',
								default: '',
								description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–∫–∏',
								required: true,
							},
							{
								displayName: 'Description',
								name: 'description',
								type: 'string',
								default: '',
								description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–∫–∏',
								required: true,
							},
							{
								displayName: 'Image URL',
								name: 'imageUrl',
								type: 'string',
								default: '',
								description: '–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∞ —Å—Å—ã–ª–∫–∞)',
							},
							{
								displayName: 'Binary Property',
								name: 'image',
								type: 'string',
								default: '',
								description: '–ë–∏–Ω–∞—Ä–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ Image URL)',
							},
						],
					},
				],
				description: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (unfurl). –ö–∞–∂–¥—ã–π URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.',
			},
			// Profile parameters
			{
				displayName: 'Status Emoji',
				name: 'statusEmoji',
				type: 'string',
				default: 'üéÆ',
				displayOptions: {
					show: {
						resource: ['status'],
						operation: ['updateStatus'],
					},
				},
				description: 'Emoji —Å–∏–º–≤–æ–ª —Å—Ç–∞—Ç—É—Å–∞',
			},
			{
				displayName: 'Status Title',
				name: 'statusTitle',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['status'],
						operation: ['updateStatus'],
					},
				},
				description: '–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞',
			},
			{
				displayName: 'Status Expires At',
				name: 'statusExpiresAt',
				type: 'dateTime',
				default: '',
				displayOptions: {
					show: {
						resource: ['status'],
						operation: ['updateStatus'],
					},
				},
				description: '–°—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
			},
			// Reactions parameters
			{
				displayName: 'Message ID',
				name: 'reactionsMessageId',
				type: 'number',
				default: '',
				displayOptions: {
					show: {
						resource: ['reactions'],
						operation: ['addReaction', 'deleteReaction', 'getReactions'],
					},
				},
				description: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è',
			},
			{
				displayName: 'Reaction Code',
				name: 'reactionsReactionCode',
				type: 'string',
				default: 'üëç',
				displayOptions: {
					show: {
						resource: ['reactions'],
						operation: ['addReaction', 'deleteReaction'],
					},
				},
				description: 'Emoji —Å–∏–º–≤–æ–ª —Ä–µ–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üëç, üî•, ‚≠ê)',
			},
			{
				displayName: 'Per Page',
				name: 'reactionsPer',
				type: 'number',
				default: 50,
				displayOptions: {
					show: {
						resource: ['reactions'],
						operation: ['getReactions'],
					},
				},
				description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∞–∫—Ü–∏–π (–º–∞–∫—Å–∏–º—É–º 50)',
			},
			{
				displayName: 'Page',
				name: 'reactionsPage',
				type: 'number',
				default: 1,
				displayOptions: {
					show: {
						resource: ['reactions'],
						operation: ['getReactions'],
					},
				},
				description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–π',
			},
			// Thread parameters
			{
				displayName: 'Message ID',
				name: 'threadMessageId',
				type: 'number',
				default: '',
				displayOptions: {
					show: {
						resource: ['thread'],
						operation: ['createThread'],
					},
				},
				description: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞',
			},
			{
				displayName: 'Thread ID',
				name: 'threadThreadId',
				type: 'number',
				default: '',
				displayOptions: {
					show: {
						resource: ['thread'],
						operation: ['getThread'],
					},
				},
				description: 'ID —Ç—Ä–µ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
			},
			// Form parameters
			{
				displayName: 'Form Builder Mode',
				name: 'formBuilderMode',
				type: 'options',
				options: [
					{
						name: 'üìã Use Template',
						value: 'template',
						description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω'
					},
					{
						name: 'üé® Visual Builder',
						value: 'builder',
						description: '–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ–æ—Ä–º'
					},
					{
						name: 'üîß Raw JSON',
						value: 'json',
						description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å JSON –Ω–∞–ø—Ä—è–º—É—é'
					}
				],
				default: 'template',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView']
					}
				},
				description: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã'
			},
			{
				displayName: 'Form Template',
				name: 'formTemplate',
				type: 'options',
				options: [
					{
						name: 'üìã Timeoff Request',
						value: 'timeoff_request',
						description: '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫'
					},
					{
						name: 'üí¨ Feedback Form',
						value: 'feedback_form',
						description: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
					},
					{
						name: 'üìù Task Request',
						value: 'task_request',
						description: '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏'
					},
					{
						name: 'üìä Survey Form',
						value: 'survey_form',
						description: '–§–æ—Ä–º–∞ –æ–ø—Ä–æ—Å–∞'
					},
					{
						name: 'üîê Access Request',
						value: 'access_request',
						description: '–§–æ—Ä–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞'
					}
				],
				default: 'timeoff_request',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView'],
						formBuilderMode: ['template']
					}
				},
				description: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã'
			},
			// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
			{
				displayName: 'Form Title',
				name: 'formTitle',
				type: 'string',
				default: '–ú–æ—è —Ñ–æ—Ä–º–∞',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView'],
						formBuilderMode: ['builder']
					}
				},
				description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã (–º–∞–∫—Å–∏–º—É–º 24 —Å–∏–º–≤–æ–ª–∞)'
			},
			{
				displayName: 'Close Button Text',
				name: 'closeText',
				type: 'string',
				default: '–û—Ç–º–µ–Ω–∞',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView'],
						formBuilderMode: ['builder']
					}
				},
				description: '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è (–º–∞–∫—Å–∏–º—É–º 24 —Å–∏–º–≤–æ–ª–∞)'
			},
			{
				displayName: 'Submit Button Text',
				name: 'submitText',
				type: 'string',
				default: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView'],
						formBuilderMode: ['builder']
					}
				},
				description: '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 24 —Å–∏–º–≤–æ–ª–∞)'
			},
			{
				displayName: 'Form Blocks',
				name: 'formBlocks',
				type: 'fixedCollection',
				typeOptions: {
					multipleValues: true,
					sortable: true
				},
				default: [],
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView'],
						formBuilderMode: ['builder']
					}
				},
				options: [
					{
						name: 'block',
						displayName: 'Block',
						values: [
							{
								displayName: 'Block Type',
								name: 'type',
								type: 'options',
								options: [
									{ name: 'üìù Header', value: 'header', description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏' },
									{ name: 'üìÑ Plain Text', value: 'plain_text', description: '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç' },
									{ name: 'üìù Markdown Text', value: 'markdown', description: '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç' },
									{ name: '‚ûñ Divider', value: 'divider', description: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å' },
									{ name: 'üìù Text Input', value: 'input', description: '–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞' },
									{ name: 'üìã Select Dropdown', value: 'select', description: '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫' },
									{ name: 'üîò Radio Buttons', value: 'radio', description: '–†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏' },
									{ name: '‚òëÔ∏è Checkboxes', value: 'checkbox', description: '–ß–µ–∫–±–æ–∫—Å—ã' },
									{ name: 'üìÖ Date Picker', value: 'date', description: '–í—ã–±–æ—Ä –¥–∞—Ç—ã' },
									{ name: 'üïê Time Picker', value: 'time', description: '–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏' },
									{ name: 'üìé File Upload', value: 'file_input', description: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤' }
								],
								default: 'header'
							},
							// –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
							{
								displayName: 'Text Content',
								name: 'text',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['header', 'plain_text', 'markdown']
									}
								},
								description: '–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
							},
							// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
							{
								displayName: 'Field Name',
								name: 'name',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['input', 'select', 'radio', 'checkbox', 'date', 'time', 'file_input']
									}
								},
								description: '–ò–º—è –ø–æ–ª—è (–±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –≤–µ–±—Ö—É–∫–µ)'
							},
							{
								displayName: 'Field Label',
								name: 'label',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['input', 'select', 'radio', 'checkbox', 'date', 'time', 'file_input']
									}
								},
								description: '–ü–æ–¥–ø–∏—Å—å –∫ –ø–æ–ª—é'
							},
							{
								displayName: 'Required',
								name: 'required',
								type: 'boolean',
								default: false,
								displayOptions: {
									show: {
										type: ['input', 'select', 'radio', 'checkbox', 'date', 'time', 'file_input']
									}
								},
								description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
							},
							{
								displayName: 'Hint',
								name: 'hint',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['input', 'select', 'radio', 'checkbox', 'date', 'time', 'file_input']
									}
								},
								description: '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–¥ –ø–æ–ª–µ–º'
							},
							// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è input
							{
								displayName: 'Placeholder',
								name: 'placeholder',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['input']
									}
								},
								description: '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è'
							},
							{
								displayName: 'Multiline',
								name: 'multiline',
								type: 'boolean',
								default: false,
								displayOptions: {
									show: {
										type: ['input']
									}
								},
								description: '–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ'
							},
							{
								displayName: 'Initial Value',
								name: 'initial_value',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['input']
									}
								},
								description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
							},
							{
								displayName: 'Min Length',
								name: 'min_length',
								type: 'number',
								default: 0,
								displayOptions: {
									show: {
										type: ['input']
									}
								},
								description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞'
							},
							{
								displayName: 'Max Length',
								name: 'max_length',
								type: 'number',
								default: 3000,
								displayOptions: {
									show: {
										type: ['input']
									}
								},
								description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞'
							},
							// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è select, radio, checkbox
							{
								displayName: 'Options',
								name: 'options',
								type: 'fixedCollection',
								typeOptions: {
									multipleValues: true
								},
								default: [],
								displayOptions: {
									show: {
										type: ['select', 'radio', 'checkbox']
									}
								},
								options: [
									{
										name: 'option',
										displayName: 'Option',
										values: [
											{
												displayName: 'Text',
												name: 'text',
												type: 'string',
												default: '',
												description: '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç'
											},
											{
												displayName: 'Value',
												name: 'value',
												type: 'string',
												default: '',
												description: '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'
											},
											{
												displayName: 'Description',
												name: 'description',
												type: 'string',
												default: '',
												description: '–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ü–∏–∏ (–¥–ª—è radio/checkbox)'
											},
											{
												displayName: 'Selected',
												name: 'selected',
												type: 'boolean',
												default: false,
												description: '–í—ã–±—Ä–∞–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è select/radio)'
											},
											{
												displayName: 'Checked',
												name: 'checked',
												type: 'boolean',
												default: false,
												description: '–û—Ç–º–µ—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è checkbox)'
											}
										]
									}
								],
								description: '–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞'
							},
							// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è date
							{
								displayName: 'Initial Date',
								name: 'initial_date',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['date']
									}
								},
								description: '–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)'
							},
							// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è time
							{
								displayName: 'Initial Time',
								name: 'initial_time',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['time']
									}
								},
								description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (HH:mm)'
							},
							// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è file_input
							{
								displayName: 'File Types',
								name: 'filetypes',
								type: 'string',
								default: '',
								displayOptions: {
									show: {
										type: ['file_input']
									}
								},
								description: '–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: pdf,jpg,png)'
							},
							{
								displayName: 'Max Files',
								name: 'max_files',
								type: 'number',
								default: 10,
								displayOptions: {
									show: {
										type: ['file_input']
									}
								},
								description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤'
							}
						]
					}
				],
				description: '–ë–ª–æ–∫–∏ —Ñ–æ—Ä–º—ã - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã'
			},
			// JSON —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			{
				displayName: 'Custom Form JSON',
				name: 'customFormJson',
				type: 'json',
				default: '{\n  "title": "–ú–æ—è —Ñ–æ—Ä–º–∞",\n  "close_text": "–û—Ç–º–µ–Ω–∞",\n  "submit_text": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",\n  "blocks": [\n    {\n      "type": "header",\n      "text": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã"\n    },\n    {\n      "type": "input",\n      "name": "field1",\n      "label": "–ü–æ–ª–µ –≤–≤–æ–¥–∞",\n      "placeholder": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç",\n      "required": true\n    },\n    {\n      "type": "select",\n      "name": "choice",\n      "label": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç",\n      "options": [\n        {"text": "–í–∞—Ä–∏–∞–Ω—Ç 1", "value": "option1", "selected": true},\n        {"text": "–í–∞—Ä–∏–∞–Ω—Ç 2", "value": "option2"}\n      ],\n      "required": true\n    }\n  ]\n}',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView'],
						formBuilderMode: ['json']
					}
				},
				description: 'JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ–æ—Ä–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–æ–∫–∏: header, plain_text, markdown, divider, input, select, radio, checkbox, date, time, file_input'
			},
			{
				displayName: 'Trigger ID',
				name: 'triggerId',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView']
					}
				},
				description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –≤–µ–±—Ö—É–∫–∞ –∫–Ω–æ–ø–∫–∏)'
			},
			{
				displayName: 'Private Metadata',
				name: 'privateMetadata',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView']
					}
				},
				description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã (JSON —Å—Ç—Ä–æ–∫–∞)'
			},
			{
				displayName: 'Callback ID',
				name: 'callbackId',
				type: 'string',
				default: '',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['createView']
					}
				},
				description: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
			},
			{
				displayName: 'Form Type',
				name: 'formType',
				type: 'options',
				options: [
					{
						name: 'ü§ñ Auto-detect (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
						value: 'auto'
					},
					{
						name: 'üìã Timeoff Request',
						value: 'timeoff_request'
					},
					{
						name: 'üí¨ Feedback Form',
						value: 'feedback_form'
					},
					{
						name: 'üìù Task Request',
						value: 'task_request'
					}
				],
				default: 'auto',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['processSubmission']
					}
				},
				description: '–¢–∏–ø —Ñ–æ—Ä–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
			},
			{
				displayName: 'Validation Errors',
				name: 'validationErrors',
				type: 'json',
				default: '{}',
				displayOptions: {
					show: {
						resource: ['form'],
						operation: ['processSubmission']
					}
				},
				description: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (JSON –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)'
			},
		],
	};

	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
		console.log('üîç Pachca node executing...');
		console.log('üìÅ Current working directory:', process.cwd());
		console.log('üìÇ Node path:', __dirname);
		
		const items = this.getInputData();
		const returnData: INodeExecutionData[] = [];

		for (let i = 0; i < items.length; i++) {
			try {
				const resource = this.getNodeParameter('resource', i) as string;
				const operation = this.getNodeParameter('operation', i) as string;
				
				console.log(`üéØ Processing: ${resource} -> ${operation}`);
				const credentials = await this.getCredentials('pachcaApi');

				let responseData: any;

				// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã
				switch (resource) {
					case 'user':
						switch (operation) {
							case 'getAll':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/users`,
									qs: {
										per: this.getNodeParameter('per', i, 25),
										page: this.getNodeParameter('page', i, 1),
										query: this.getNodeParameter('query', i, ''),
									},
								});
								break;
							case 'getById':
								const userId = this.getNodeParameter('userId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/users/${userId}`,
								});
								break;
							case 'create':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/users`,
									body: {
									user: {
											email: this.getNodeParameter('email', i),
											first_name: this.getNodeParameter('firstName', i),
											last_name: this.getNodeParameter('lastName', i),
										},
									},
								});
								break;
							case 'update':
								const updateUserId = this.getNodeParameter('userId', i) as number;
								const firstName = this.getNodeParameter('firstName', i) as string;
								const lastName = this.getNodeParameter('lastName', i) as string;
								const email = this.getNodeParameter('email', i) as string;
								const nickname = this.getNodeParameter('nickname', i) as string;
								const phoneNumber = this.getNodeParameter('phoneNumber', i) as string;
								const department = this.getNodeParameter('department', i) as string;
								const title = this.getNodeParameter('title', i) as string;
								const role = this.getNodeParameter('role', i) as string;
								const suspended = this.getNodeParameter('suspended', i) as boolean;
								const listTags = this.getNodeParameter('listTags', i) as string;
								const customProperties = this.getNodeParameter('customProperties', i) as any;
								
								// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
								const userData: any = {};
								
								// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
								if (firstName) userData.first_name = firstName;
								if (lastName) userData.last_name = lastName;
								if (email) userData.email = email;
								if (nickname) userData.nickname = nickname;
								if (phoneNumber) userData.phone_number = phoneNumber;
								if (department) userData.department = department;
								if (title) userData.title = title;
								if (role) userData.role = role;
								if (suspended !== undefined) userData.suspended = suspended;
								
								// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
								if (listTags) {
									userData.list_tags = listTags.split(',').map(tag => tag.trim()).filter(tag => tag);
								}
								
								// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
								if (customProperties && customProperties.property) {
									userData.custom_properties = customProperties.property.map((prop: any) => ({
										id: prop.id,
										value: prop.value,
									}));
								}
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/users/${updateUserId}`,
									body: {
										user: userData,
									},
								});
								break;
							case 'delete':
								const deleteUserId = this.getNodeParameter('userId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/users/${deleteUserId}`,
								});
								break;
						}
						break;

					case 'message':
						switch (operation) {
							case 'send':
								const entityType = this.getNodeParameter('entityType', i);
								const entityId = this.getNodeParameter('entityId', i);
								const content = this.getNodeParameter('content', i);
								const buttons = this.getNodeParameter('buttons', i) as any;
								
								// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
								if (!entityId || entityId === '') {
									throw new NodeOperationError(this.getNode(), 'Entity ID is required for sending messages');
								}
								if (!content || content === '') {
									throw new NodeOperationError(this.getNode(), 'Content is required for sending messages');
								}
								
								// –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
								const buttonRows: any[] = [];
								if (buttons) {
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ buttons - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å buttonRow (–æ–¥–∏–Ω–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫)
									if (buttons.buttonRow && Array.isArray(buttons.buttonRow)) {
										const row: any[] = [];
										for (const button of buttons.buttonRow) {
											if (button.type === 'data') {
												row.push({
													text: button.text,
													data: button.data
												});
											} else if (button.type === 'url') {
												row.push({
													text: button.text,
													url: button.url
												});
											}
										}
										if (row.length > 0) {
											buttonRows.push(row);
										}
									}
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ buttons - —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫
									else if (Array.isArray(buttons) && buttons.length > 0) {
										for (const buttonRow of buttons) {
											const row: any[] = [];
											if (buttonRow.buttonRow && Array.isArray(buttonRow.buttonRow)) {
												for (const button of buttonRow.buttonRow) {
													if (button.type === 'data') {
														row.push({
															text: button.text,
															data: button.data
														});
													} else if (button.type === 'url') {
														row.push({
															text: button.text,
															url: button.url
														});
													}
												}
											}
											if (row.length > 0) {
												buttonRows.push(row);
											}
										}
									}
								}
								
								// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
								const debugInfo = {
									timestamp: new Date().toISOString(),
									rawButtons: buttons,
									processedButtonRows: buttonRows,
									buttonRowsLength: buttonRows.length,
									entityType,
									entityId,
									content
								};
								
								console.log('=== SENDING MESSAGE DEBUG ===');
								console.log(JSON.stringify(debugInfo, null, 2));
								
								// –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
								const fs = require('fs');
								const logFile = '/tmp/pachca-debug.log';
								fs.appendFileSync(logFile, JSON.stringify(debugInfo) + '\n');
								
								const messageBody: any = {
									message: {
										entity_type: entityType,
										entity_id: entityId,
										content: content,
									}
								};

								if (buttonRows.length > 0) {
									messageBody.message.buttons = buttonRows;
									console.log('Added buttons to message body');
									fs.appendFileSync(logFile, 'BUTTONS ADDED TO MESSAGE BODY\n');
								} else {
									console.log('No buttons to add');
									fs.appendFileSync(logFile, 'NO BUTTONS TO ADD\n');
								}
								
								console.log('Final message body:', JSON.stringify(messageBody, null, 2));
								fs.appendFileSync(logFile, 'FINAL MESSAGE BODY: ' + JSON.stringify(messageBody) + '\n');
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/messages`,
									body: messageBody,
								});
								break;
							case 'getById':
								const messageId = this.getNodeParameter('messageId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/messages/${messageId}`,
								});
								break;
							case 'getAll':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/messages`,
									qs: {
										chat_id: this.getNodeParameter('chatId', i),
										per: this.getNodeParameter('per', i, 25),
										page: this.getNodeParameter('page', i, 1),
									},
								});
								break;
							case 'update':
								const updateMessageId = this.getNodeParameter('messageId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/messages/${updateMessageId}`,
									body: {
										message: {
											content: this.getNodeParameter('content', i),
										},
									},
								});
								break;
							case 'delete':
								const deleteMessageId = this.getNodeParameter('messageId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/messages/${deleteMessageId}`,
								});
								break;
							case 'pin':
								const pinMessageId = this.getNodeParameter('messageId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/messages/${pinMessageId}/pin`,
								});
								break;
							case 'unpin':
								const unpinMessageId = this.getNodeParameter('messageId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/messages/${unpinMessageId}/pin`,
								});
								break;
							case 'getReadMembers':
								const getReadMembersMessageId = this.getNodeParameter('messageId', i) as number;
								const readMembersPer = this.getNodeParameter('readMembersPer', i) as number;
								const readMembersPage = this.getNodeParameter('readMembersPage', i) as number;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/messages/${getReadMembersMessageId}/read_member_ids`,
									qs: {
										per: readMembersPer,
										page: readMembersPage,
									},
								});
								break;
							case 'unfurl':
								const linkPreviewMessageId = this.getNodeParameter('messageId', i) as number;
								const linkPreviews = this.getNodeParameter('linkPreviews', i) as any;
								
								// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
								if (!linkPreviewMessageId) {
									throw new NodeOperationError(this.getNode(), 'Message ID is required for unfurling links');
								}
								
								if (!linkPreviews || !linkPreviews.preview || !Array.isArray(linkPreviews.preview) || linkPreviews.preview.length === 0) {
									throw new NodeOperationError(this.getNode(), 'At least one link preview is required for unfurling');
								}
								
								// –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç link_previews
								const linkPreviewsObject: any = {};
								
								for (const preview of linkPreviews.preview) {
									const url = preview.url;
									const title = preview.title;
									const description = preview.description;
									const imageUrl = preview.imageUrl;
									const image = preview.image;
									
									// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
									if (!url || !title || !description) {
										throw new NodeOperationError(this.getNode(), 'URL, title and description are required for each link preview');
									}
									
									const previewObject: any = {
										title: title,
										description: description,
									};
									
									// –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
									if (image && image !== '') {
										// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
										const binaryData = await this.helpers.getBinaryDataBuffer(i, image);
										if (!binaryData) {
											throw new NodeOperationError(this.getNode(), `No binary data found in property "${image}"`);
										}
										
										const fileData = binaryData;
										const item = this.getInputData()[i];
										let fileName = 'image.jpg';
										let contentType = 'image/jpeg';
										
										if (item.binary && item.binary[image]) {
											const binaryInfo = item.binary[image];
											fileName = binaryInfo.fileName || 'image.jpg';
											contentType = binaryInfo.mimeType || 'image/jpeg';
										}
										
										// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
										const uploadParams = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
											method: 'POST',
											url: `${credentials?.baseUrl}/uploads`,
											body: {
												filename: fileName,
												content_type: contentType,
											},
										});
										
										// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
										const uploadResponse = await this.helpers.httpRequest.call(this, {
											method: 'POST',
											url: uploadParams.upload_url,
											body: fileData,
											headers: uploadParams.upload_headers,
										});
										
										previewObject.image = {
											key: uploadParams.key,
											name: fileName,
											size: fileData.length.toString(),
										};
									} else if (imageUrl) {
										previewObject.image_url = imageUrl;
									}
									
									linkPreviewsObject[url] = previewObject;
								}
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/messages/${linkPreviewMessageId}/link_previews`,
									body: {
										link_previews: linkPreviewsObject,
									},
								});
								break;
						}
						break;

					case 'chat':
						switch (operation) {
							case 'getAll':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/chats`,
									qs: {
										per: this.getNodeParameter('per', i, 25),
										page: this.getNodeParameter('page', i, 1),
									},
								});
								break;
							case 'getById':
								const chatId = this.getNodeParameter('chatId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/chats/${chatId}`,
								});
								break;
							case 'create':
								const chatName = this.getNodeParameter('chatName', i) as string;
								const channel = this.getNodeParameter('channel', i) as boolean;
								const publicChat = this.getNodeParameter('public', i) as boolean;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/chats`,
									body: {
									chat: {
										name: chatName,
											channel: channel,
											public: publicChat,
										},
									},
								});
								break;
							case 'update':
								const updateChatId = this.getNodeParameter('chatId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/chats/${updateChatId}`,
									body: {
										chat: {
											name: this.getNodeParameter('chatName', i),
										},
									},
								});
								break;
							case 'archive':
								const archiveChatId = this.getNodeParameter('chatId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/chats/${archiveChatId}/archive`,
								});
								break;
							case 'unarchive':
								const unarchiveChatId = this.getNodeParameter('chatId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/chats/${unarchiveChatId}/unarchive`,
								});
								break;
							case 'getMembers':
								const membersChatId = this.getNodeParameter('chatId', i) as number;
								const role = this.getNodeParameter('role', i) as string;
								const limit = this.getNodeParameter('limit', i) as number;
								const cursor = this.getNodeParameter('cursor', i) as string;
								
								const membersQuery: any = {};
								if (role && role !== 'all') {
									membersQuery.role = role;
								}
								if (limit) {
									membersQuery.limit = limit;
								}
								if (cursor) {
									membersQuery.cursor = cursor;
								}
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/chats/${membersChatId}/members`,
									qs: membersQuery,
								});
						break;
							case 'addUsers':
								const addUsersChatId = this.getNodeParameter('chatId', i) as number;
								const memberIds = this.getNodeParameter('memberIds', i) as string;
								const silent = this.getNodeParameter('silent', i) as boolean;
								
								const userIdsArray = memberIds.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/chats/${addUsersChatId}/members`,
									body: {
										member_ids: userIdsArray,
										silent: silent,
									},
								});
								break;
							case 'removeUser':
								const removeUserChatId = this.getNodeParameter('chatId', i) as number;
								const userId = this.getNodeParameter('userId', i) as number;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/chats/${removeUserChatId}/members/${userId}`,
								});
								break;
							case 'updateRole':
								const updateRoleChatId = this.getNodeParameter('chatId', i) as number;
								const updateUserId = this.getNodeParameter('userId', i) as number;
								const newRole = this.getNodeParameter('newRole', i) as string;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/chats/${updateRoleChatId}/members/${updateUserId}`,
									body: {
										role: newRole,
									},
								});
								break;
							case 'leaveChat':
								const leaveChatId = this.getNodeParameter('chatId', i) as number;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/chats/${leaveChatId}/leave`,
								});
								break;
						}
						break;

					case 'groupTag':
						switch (operation) {
							case 'getAll':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/group_tags`,
									qs: {
										per: this.getNodeParameter('per', i, 25),
										page: this.getNodeParameter('page', i, 1),
									},
								});
								break;
							case 'getById':
								const groupTagId = this.getNodeParameter('groupTagId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/group_tags/${groupTagId}`,
								});
								break;
							case 'create':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/group_tags`,
									body: {
										group_tag: {
											name: this.getNodeParameter('groupTagName', i),
											color: this.getNodeParameter('groupTagColor', i),
										},
									},
								});
								break;
							case 'update':
								const updateGroupTagId = this.getNodeParameter('groupTagId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/group_tags/${updateGroupTagId}`,
									body: {
										group_tag: {
											name: this.getNodeParameter('groupTagName', i),
											color: this.getNodeParameter('groupTagColor', i),
										},
									},
								});
								break;
							case 'delete':
								const deleteGroupTagId = this.getNodeParameter('groupTagId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/group_tags/${deleteGroupTagId}`,
								});
								break;
							case 'getUsers':
								const getUsersGroupTagId = this.getNodeParameter('groupTagId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/group_tags/${getUsersGroupTagId}/users`,
									qs: {
										per: this.getNodeParameter('per', i, 25),
										page: this.getNodeParameter('page', i, 1),
									},
								});
								break;
							case 'addTags':
								const addTagsChatId = this.getNodeParameter('groupTagChatId', i) as number;
								const groupTagIds = this.getNodeParameter('groupTagIds', i) as string;
								
								const tagIdsArray = groupTagIds.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/chats/${addTagsChatId}/group_tags`,
									body: {
										group_tag_ids: tagIdsArray,
									},
								});
								break;
							case 'removeTag':
								const removeTagChatId = this.getNodeParameter('groupTagChatId', i) as number;
								const tagId = this.getNodeParameter('tagId', i) as number;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/chats/${removeTagChatId}/group_tags/${tagId}`,
								});
								break;
						}
						break;

					case 'file':
						switch (operation) {
							case 'upload':
								const fileSource = this.getNodeParameter('fileSource', i) as string;
								let fileName = this.getNodeParameter('fileName', i) as string;
								let contentType = this.getNodeParameter('contentType', i) as string;
								let fileData: Buffer;
								
								if (fileSource === 'url') {
									// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
									const fileUrl = this.getNodeParameter('fileUrl', i) as string;
									if (!fileUrl) {
										throw new NodeOperationError(this.getNode(), 'File URL is required when using URL source');
									}
									
									// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
									const fileResponse = await this.helpers.httpRequest.call(this, {
										method: 'GET',
										url: fileUrl,
									});
									
									fileData = Buffer.from(fileResponse);
									
									// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
									if (!fileName) {
										const urlPath = new URL(fileUrl).pathname;
										fileName = urlPath.split('/').pop() || 'file';
									}
									
									// –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
									if (contentType === 'application/octet-stream') {
										const extension = fileName.split('.').pop()?.toLowerCase();
										const mimeTypes: { [key: string]: string } = {
											'jpg': 'image/jpeg',
											'jpeg': 'image/jpeg',
											'png': 'image/png',
											'gif': 'image/gif',
											'pdf': 'application/pdf',
											'doc': 'application/msword',
											'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
											'txt': 'text/plain',
											'csv': 'text/csv',
											'json': 'application/json',
										};
										contentType = mimeTypes[extension || ''] || 'application/octet-stream';
									}
								} else {
									// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É–∑–ª–∞
									const binaryProperty = this.getNodeParameter('binaryProperty', i) as string;
									const binaryData = await this.helpers.getBinaryDataBuffer(i, binaryProperty);
									
									if (!binaryData) {
										throw new NodeOperationError(this.getNode(), `No binary data found in property "${binaryProperty}"`);
									}
									
									fileData = binaryData;
									
									// –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
									const item = this.getInputData()[i];
									if (item.binary && item.binary[binaryProperty]) {
										const binaryInfo = item.binary[binaryProperty];
										
										// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
										if (!fileName && binaryInfo.fileName) {
											fileName = binaryInfo.fileName;
										}
										
										// –ò—Å–ø–æ–ª—å–∑—É–µ–º content type –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
										if (contentType === 'application/octet-stream' && binaryInfo.mimeType) {
											contentType = binaryInfo.mimeType;
										}
									}
								}
								
								if (!fileName) {
									fileName = 'file';
								}
								
								// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
								console.log('=== FILE UPLOAD DEBUG START ===');
								console.log('File info:', {
									fileName,
									contentType,
									fileSize: fileData.length,
									fileSource
								});
								
								console.log('Credentials info:', {
									baseUrl: credentials?.baseUrl,
									tokenType: credentials?.tokenType,
									hasToken: !!credentials?.accessToken
								});
								
								const requestUrl = `${credentials?.baseUrl}/uploads`;
								const requestBody = {
									filename: fileName,
									content_type: contentType,
								};
								
								console.log('Request details:', {
									url: requestUrl,
									method: 'POST',
									body: requestBody
								});
								
								let uploadParams;
								try {
									uploadParams = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
										method: 'POST',
										url: requestUrl,
										body: requestBody,
									});
									console.log('Upload params request SUCCESS');
								} catch (error) {
									console.error('Upload params request FAILED:', error);
									console.error('Error details:', {
										status: (error as any).status,
										statusText: (error as any).statusText,
										message: (error as any).message,
										response: (error as any).response,
										responseData: (error as any).response?.data
									});
									
									// –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ body
									console.log('Trying without body...');
									try {
										uploadParams = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
											method: 'POST',
											url: requestUrl,
										});
										console.log('Upload params request SUCCESS (without body)');
									} catch (error2) {
										console.error('Upload params request FAILED (without body):', error2);
										throw error; // –ë—Ä–æ—Å–∞–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
									}
								}
								
								console.log('Upload params received:', uploadParams);
								console.log('Upload params structure:', JSON.stringify(uploadParams, null, 2));
								
								// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é
								const params = uploadParams?.data || uploadParams;
								
								if (!params) {
									throw new NodeOperationError(this.getNode(), 'No upload params in response');
								}
								
								if (!params.direct_url) {
									throw new NodeOperationError(this.getNode(), 'No direct_url in upload params response. Response structure: ' + JSON.stringify(params));
								}
								
								// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ direct_url
								console.log('Uploading file to:', params.direct_url);
								
								// –§–æ—Ä–º–∏—Ä—É–µ–º multipart/form-data –¥–ª—è S3
								// S3 —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã —Ñ–∞–π–ª –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
								const formData = {
									'Content-Disposition': params['Content-Disposition'],
									'acl': params.acl,
									'policy': params.policy,
									'x-amz-credential': params['x-amz-credential'],
									'x-amz-algorithm': params['x-amz-algorithm'],
									'x-amz-date': params['x-amz-date'],
									'x-amz-signature': params['x-amz-signature'],
									'key': params.key,
									'file': fileData, // –ü—Ä–æ—Å—Ç–æ Buffer, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
								};
								
								// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
								console.log('=== FILE UPLOAD TO DIRECT_URL ===');
								console.log('Direct URL:', params.direct_url);
								console.log('Form data keys:', Object.keys(formData));
								
								try {
									// –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è S3
									const FormData = require('form-data');
									const form = new FormData();
									
									// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
									form.append('Content-Disposition', params['Content-Disposition']);
									form.append('acl', params.acl);
									form.append('policy', params.policy);
									form.append('x-amz-credential', params['x-amz-credential']);
									form.append('x-amz-algorithm', params['x-amz-algorithm']);
									form.append('x-amz-date', params['x-amz-date']);
									form.append('x-amz-signature', params['x-amz-signature']);
									form.append('key', params.key);
									form.append('file', fileData, {
										filename: fileName,
										contentType: contentType,
									});
									
									responseData = await this.helpers.httpRequest.call(this, {
										method: 'POST',
										url: params.direct_url,
										body: form,
										headers: {
											...form.getHeaders(),
										},
									});
									console.log('File upload to direct_url SUCCESS');
								} catch (error) {
									console.error('File upload to direct_url FAILED:', error);
									console.error('Upload error details:', {
										status: (error as any).status,
										statusText: (error as any).statusText,
										message: (error as any).message,
										response: (error as any).response,
										responseData: (error as any).response?.data
									});
									throw error;
								}
								
								// –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
								const fileKey = params.key.replace('${filename}', fileName);
								
								console.log('File upload completed. File key:', fileKey);
								
								// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
								responseData = {
									success: true,
									file_key: fileKey,
									file_name: fileName,
									content_type: contentType,
									upload_params: params,
								};
								break;
						}
						break;

					case 'customFields':
						switch (operation) {
							case 'getCustomProperties':
								const entityType = this.getNodeParameter('entityType', i) as string;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/custom_properties`,
									qs: {
										entity_type: entityType,
									},
								});
								break;
						}
						break;

					case 'task':
						switch (operation) {
							case 'create':
								const taskKind = this.getNodeParameter('taskKind', i) as string;
								const taskContent = this.getNodeParameter('taskContent', i) as string;
								const taskDueAt = this.getNodeParameter('taskDueAt', i) as string;
								const taskPriority = this.getNodeParameter('taskPriority', i) as number;
								const performerIds = this.getNodeParameter('performerIds', i) as string;
								const customProperties = this.getNodeParameter('customProperties', i) as any;

								const taskData: any = {
									kind: taskKind,
								};

								if (taskContent) {
									taskData.content = taskContent;
								}

								if (taskDueAt) {
									taskData.due_at = taskDueAt;
								}

								if (taskPriority) {
									taskData.priority = taskPriority;
								}

								if (performerIds) {
									const performerIdsArray = performerIds.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
									if (performerIdsArray.length > 0) {
										taskData.performer_ids = performerIdsArray;
									}
								}

								if (customProperties && customProperties.length > 0) {
									taskData.custom_properties = customProperties;
								}

								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/tasks`,
									body: {
										task: taskData,
									},
								});
								break;
						}
						break;

					case 'bot':
						switch (operation) {
							case 'update':
								const botId = this.getNodeParameter('botId', i) as number;
								const webhookUrl = this.getNodeParameter('webhookUrl', i) as string;

								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/bots/${botId}`,
									body: {
										bot: {
											webhook: {
												outgoing_url: webhookUrl,
											},
										},
									},
								});
								break;
						}
						break;

					case 'status':
						switch (operation) {
							case 'getProfile':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/profile`,
								});
								break;
							case 'getStatus':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/profile/status`,
								});
								break;
							case 'updateStatus':
								const statusEmoji = this.getNodeParameter('statusEmoji', i) as string;
								const statusTitle = this.getNodeParameter('statusTitle', i) as string;
								const statusExpiresAt = this.getNodeParameter('statusExpiresAt', i) as string;

								const statusData: any = {
									emoji: statusEmoji,
									title: statusTitle,
								};

								if (statusExpiresAt) {
									statusData.expires_at = statusExpiresAt;
								}

								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'PUT',
									url: `${credentials?.baseUrl}/profile/status`,
									body: {
										status: statusData,
									},
								});
								break;
							case 'deleteStatus':
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/profile/status`,
								});
								break;
						}
						break;

					case 'reactions':
						switch (operation) {
							case 'addReaction':
								const addReactionMessageId = this.getNodeParameter('reactionsMessageId', i) as number;
								const reactionCode = this.getNodeParameter('reactionsReactionCode', i) as string;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/messages/${addReactionMessageId}/reactions`,
									body: {
										code: reactionCode,
									},
								});
								break;
							case 'deleteReaction':
								const deleteReactionMessageId = this.getNodeParameter('reactionsMessageId', i) as number;
								const deleteReactionCode = this.getNodeParameter('reactionsReactionCode', i) as string;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'DELETE',
									url: `${credentials?.baseUrl}/messages/${deleteReactionMessageId}/reactions`,
									body: {
										code: deleteReactionCode,
									},
								});
								break;
							case 'getReactions':
								const getReactionsMessageId = this.getNodeParameter('reactionsMessageId', i) as number;
								const reactionsPer = this.getNodeParameter('reactionsPer', i) as number;
								const reactionsPage = this.getNodeParameter('reactionsPage', i) as number;
								
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/messages/${getReactionsMessageId}/reactions`,
									qs: {
										per: reactionsPer,
										page: reactionsPage,
									},
								});
								break;
						}
						break;

					case 'thread':
						switch (operation) {
							case 'createThread':
								const createThreadMessageId = this.getNodeParameter('threadMessageId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/messages/${createThreadMessageId}/thread`,
								});
								break;
							case 'getThread':
								const threadId = this.getNodeParameter('threadThreadId', i) as number;
								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'GET',
									url: `${credentials?.baseUrl}/threads/${threadId}`,
								});
								break;
						}
						break;

					case 'form':
						switch (operation) {
							case 'createView':
								const formBuilderMode = this.getNodeParameter('formBuilderMode', i) as string;
								const triggerId = this.getNodeParameter('triggerId', i) as string;
								const privateMetadata = this.getNodeParameter('privateMetadata', i) as string;
								const callbackId = this.getNodeParameter('callbackId', i) as string;

								if (!triggerId) {
									throw new NodeOperationError(this.getNode(), 'Trigger ID is required for creating form view');
								}

								let viewData: any;

								if (formBuilderMode === 'template') {
									// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
									const formTemplate = this.getNodeParameter('formTemplate', i) as string;
									viewData = FORM_TEMPLATES[formTemplate];
									if (!viewData) {
										throw new NodeOperationError(this.getNode(), `Form template "${formTemplate}" not found`);
									}
								} else if (formBuilderMode === 'builder') {
									// –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
									const formTitle = this.getNodeParameter('formTitle', i) as string;
									const closeText = this.getNodeParameter('closeText', i) as string;
									const submitText = this.getNodeParameter('submitText', i) as string;
									const formBlocks = this.getNodeParameter('formBlocks', i) as any;

									// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–ª–æ–∫–∏ –∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç API
									const blocks: any[] = [];
									console.log('=== FORM BUILDER DEBUG ===');
									console.log('formBlocks:', formBlocks);
									console.log('formBlocks type:', typeof formBlocks);
									console.log('formBlocks is array:', Array.isArray(formBlocks));
									
									// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º formBlocks –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
									let blocksToProcess: any[] = [];
									
									if (Array.isArray(formBlocks)) {
										// –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤
										blocksToProcess = formBlocks;
									} else if (formBlocks && typeof formBlocks === 'object') {
										// –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º {block: {...}}
										if (formBlocks.block) {
											blocksToProcess = [formBlocks];
										}
									}
									
									console.log('blocksToProcess:', blocksToProcess);
									console.log('blocksToProcess length:', blocksToProcess.length);
									
									if (blocksToProcess.length > 0) {
										for (const blockData of blocksToProcess) {
											console.log('Processing blockData:', blockData);
											console.log('blockData keys:', Object.keys(blockData));
											
											// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞
											let block = blockData.block || blockData;
											console.log('Processing block:', block);
											console.log('block keys:', Object.keys(block));
											console.log('block is array:', Array.isArray(block));
											console.log('block type:', typeof block);
											
											// –ï—Å–ª–∏ block —ç—Ç–æ –º–∞—Å—Å–∏–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ - –≥–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –∏–ª–∏ fixedCollection
											if (Array.isArray(block)) {
												console.log('Block is array, checking format...');
												console.log('Array values:', block);
												
												// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å type, —Ç–æ —ç—Ç–æ –≥–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
												if (block.length > 0 && typeof block[0] === 'object' && block[0].type) {
													console.log('Array contains ready blocks, processing...');
													// –≠—Ç–æ –º–∞—Å—Å–∏–≤ –≥–æ—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫
													for (const readyBlock of block) {
														console.log('Processing ready block type:', readyBlock.type);
														console.log('Ready block before processing:', JSON.stringify(readyBlock, null, 2));
														
														// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç options –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
														if (readyBlock.options && readyBlock.options.option && Array.isArray(readyBlock.options.option)) {
															console.log('Fixing options format for block:', readyBlock.type);
															readyBlock.options = readyBlock.options.option;
														}
														
														// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è selected/checked –≤ options
														if (readyBlock.options && Array.isArray(readyBlock.options)) {
															for (const option of readyBlock.options) {
																// –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
																const cleanOption: any = {
																	text: option.text,
																	value: option.value
																};
																
																// –î–æ–±–∞–≤–ª—è–µ–º description —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç text
																if (option.description && option.description !== option.text && option.description.trim() !== '') {
																	cleanOption.description = option.description;
																}
																
																// –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
																if (readyBlock.type === 'select') {
																	// –í select –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è selected
																	if (option.selected === true) {
																		cleanOption.selected = true;
																	}
																} else if (readyBlock.type === 'radio') {
																	// –í radio –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è checked
																	if (option.checked === true) {
																		cleanOption.checked = true;
																	}
																} else if (readyBlock.type === 'checkbox') {
																	// –í checkbox –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è checked
																	if (option.checked === true) {
																		cleanOption.checked = true;
																	}
																}
																
																// –ó–∞–º–µ–Ω—è–µ–º –æ–ø—Ü–∏—é –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
																const optionIndex = readyBlock.options.indexOf(option);
																readyBlock.options[optionIndex] = cleanOption;
															}
														}
														
														// –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –±–ª–æ–∫–∞
														const cleanBlock = { ...readyBlock };
														if (cleanBlock.hint === '') {
															delete cleanBlock.hint;
														}
														if (cleanBlock.placeholder === '') {
															delete cleanBlock.placeholder;
														}
														if (cleanBlock.initial_value === '') {
															delete cleanBlock.initial_value;
														}
														
														console.log('Final clean block:', JSON.stringify(cleanBlock, null, 2));
														console.log('Adding block to final array, type:', cleanBlock.type);
														blocks.push(cleanBlock);
													}
													continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
												}
												
												console.log('Array is fixedCollection format, parsing...');
												
												// –í fixedCollection –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª–µ–π
												// –ù—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –Ω–∞—à–∏–º–∏ –ø–æ–ª—è–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
												const blockObj: any = {
													type: block[0] || '', // Block Type
													text: block[1] || '', // Text Content
													name: block[2] || '', // Field Name
													label: block[3] || '', // Field Label
													required: block[4] || false, // Required
													hint: block[5] || '', // Hint
													placeholder: block[6] || '', // Placeholder
													multiline: block[7] || false, // Multiline
													initial_value: block[8] || '', // Initial Value
													min_length: block[9] || 0, // Min Length
													max_length: block[10] || 3000, // Max Length
													options: block[11] || [], // Options
													initial_date: block[12] || '', // Initial Date
													initial_time: block[13] || '', // Initial Time
													filetypes: block[14] || '', // File Types
													max_files: block[15] || 10 // Max Files
												};
												
												console.log('Raw block array:', block);
												console.log('Parsed blockObj:', blockObj);
												
												console.log('Converted block object:', blockObj);
												
												// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ —Å—Ä–∞–∑—É
												const finalBlockObj: any = {
													type: blockObj.type
												};
												
												console.log('Creating finalBlockObj with type:', blockObj.type);
												
												// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –±–ª–æ–∫–æ–≤
												if (['header', 'plain_text', 'markdown'].includes(blockObj.type)) {
													finalBlockObj.text = blockObj.text;
												} else if (blockObj.type === 'divider') {
													// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
												} else if (['input', 'select', 'radio', 'checkbox', 'date', 'time', 'file_input'].includes(blockObj.type)) {
													finalBlockObj.name = blockObj.name;
													finalBlockObj.label = blockObj.label;
													if (blockObj.required) finalBlockObj.required = blockObj.required;
													if (blockObj.hint) finalBlockObj.hint = blockObj.hint;

													// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è input
													if (blockObj.type === 'input') {
														if (blockObj.placeholder) finalBlockObj.placeholder = blockObj.placeholder;
														if (blockObj.multiline) finalBlockObj.multiline = blockObj.multiline;
														if (blockObj.initial_value) finalBlockObj.initial_value = blockObj.initial_value;
														if (blockObj.min_length) finalBlockObj.min_length = blockObj.min_length;
														if (blockObj.max_length) finalBlockObj.max_length = blockObj.max_length;
													}

													// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è select, radio, checkbox
													if (['select', 'radio', 'checkbox'].includes(blockObj.type) && blockObj.options) {
														finalBlockObj.options = blockObj.options.map((opt: any) => {
															const option: any = {
																text: opt.option.text,
																value: opt.option.value
															};
															if (opt.option.description) option.description = opt.option.description;
															if (blockObj.type === 'select' || blockObj.type === 'radio') {
																if (opt.option.selected) option.selected = opt.option.selected;
															} else if (blockObj.type === 'checkbox') {
																if (opt.option.checked) option.checked = opt.option.checked;
															}
															return option;
														});
													}

													// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è date
													if (blockObj.type === 'date' && blockObj.initial_date) {
														finalBlockObj.initial_date = blockObj.initial_date;
													}

													// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è time
													if (blockObj.type === 'time' && blockObj.initial_time) {
														finalBlockObj.initial_time = blockObj.initial_time;
													}

													// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è file_input
													if (blockObj.type === 'file_input') {
														if (blockObj.filetypes) {
															finalBlockObj.filetypes = blockObj.filetypes.split(',').map((t: string) => t.trim());
														}
														if (blockObj.max_files) finalBlockObj.max_files = blockObj.max_files;
													}
												}
												
												console.log('Final block object to push:', finalBlockObj);
												blocks.push(finalBlockObj);
												continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
											} else if (block && typeof block === 'object') {
												// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
												console.log('Block is object, checking for ready blocks...');
												
												// –ò—â–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —Å –ø–æ–ª–µ–º type
												for (const [key, value] of Object.entries(block)) {
													if (value && typeof value === 'object' && (value as any).type) {
														console.log(`Found ready block in key '${key}':`, value);
														blocks.push(value);
														break; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫
													}
												}
												continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
											}
											
											console.log('block.type:', block.type);
											
											if (!block.type) {
												console.log('ERROR: block.type is undefined!');
												continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏ –±–µ–∑ —Ç–∏–ø–∞
											}
											
											const blockObj: any = {
												type: block.type
											};

											// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –±–ª–æ–∫–æ–≤
											if (['header', 'plain_text', 'markdown'].includes(block.type)) {
												blockObj.text = block.text;
											} else if (block.type === 'divider') {
												// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
											} else if (['input', 'select', 'radio', 'checkbox', 'date', 'time', 'file_input'].includes(block.type)) {
												blockObj.name = block.name;
												blockObj.label = block.label;
												if (block.required) blockObj.required = block.required;
												if (block.hint) blockObj.hint = block.hint;

												// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è input
												if (block.type === 'input') {
													if (block.placeholder) blockObj.placeholder = block.placeholder;
													if (block.multiline) blockObj.multiline = block.multiline;
													if (block.initial_value) blockObj.initial_value = block.initial_value;
													if (block.min_length) blockObj.min_length = block.min_length;
													if (block.max_length) blockObj.max_length = block.max_length;
												}

												// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è select, radio, checkbox
												if (['select', 'radio', 'checkbox'].includes(block.type) && block.options) {
													blockObj.options = block.options.map((opt: any) => {
														const option: any = {
															text: opt.option.text,
															value: opt.option.value
														};
														if (opt.option.description) option.description = opt.option.description;
														if (block.type === 'select' || block.type === 'radio') {
															if (opt.option.selected) option.selected = opt.option.selected;
														} else if (block.type === 'checkbox') {
															if (opt.option.checked) option.checked = opt.option.checked;
														}
														return option;
													});
												}

												// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è date
												if (block.type === 'date' && block.initial_date) {
													blockObj.initial_date = block.initial_date;
												}

												// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è time
												if (block.type === 'time' && block.initial_time) {
													blockObj.initial_time = block.initial_time;
												}

												// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è file_input
												if (block.type === 'file_input') {
													if (block.filetypes) {
														blockObj.filetypes = block.filetypes.split(',').map((t: string) => t.trim());
													}
													if (block.max_files) blockObj.max_files = block.max_files;
												}
											}

											blocks.push(blockObj);
										}
									}

									console.log('Final blocks array:', blocks);
									console.log('Blocks length:', blocks.length);
									
									// –í–∞–ª–∏–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º 1 –±–ª–æ–∫
									if (blocks.length === 0) {
										console.log('ERROR: No blocks found!');
										if (blocksToProcess.length === 0) {
											throw new NodeOperationError(this.getNode(), 'Form must contain at least one block. Please add blocks using the "Add Block" button in the Form Blocks section.');
										} else {
											throw new NodeOperationError(this.getNode(), 'Form must contain at least one block');
										}
									}

									viewData = {
										title: formTitle,
										close_text: closeText,
										submit_text: submitText,
										blocks: blocks
									};
								} else if (formBuilderMode === 'json') {
									// JSON —Ä–µ–¥–∞–∫—Ç–æ—Ä
									const customFormJson = this.getNodeParameter('customFormJson', i) as string;
									try {
										viewData = JSON.parse(customFormJson);
										
										// –í–∞–ª–∏–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º 1 –±–ª–æ–∫
										if (!viewData.blocks || !Array.isArray(viewData.blocks) || viewData.blocks.length === 0) {
											throw new NodeOperationError(this.getNode(), 'Form must contain at least one block in blocks array');
										}
									} catch (error) {
										if (error instanceof NodeOperationError) {
											throw error;
										}
										throw new NodeOperationError(this.getNode(), 'Invalid JSON format in Custom Form JSON field');
									}
								} else {
									throw new NodeOperationError(this.getNode(), `Unknown form builder mode: ${formBuilderMode}`);
								}

								const requestBody: any = {
									trigger_id: triggerId,
									type: 'modal',
									view: viewData
								};

								if (privateMetadata) {
									requestBody.private_metadata = privateMetadata;
								}
								if (callbackId) {
									requestBody.callback_id = callbackId;
								}

								console.log('=== FINAL REQUEST BODY ===');
								console.log(JSON.stringify(requestBody, null, 2));

								responseData = await this.helpers.httpRequestWithAuthentication.call(this, 'pachcaApi', {
									method: 'POST',
									url: `${credentials?.baseUrl}/views/open`,
									body: requestBody,
								});
								break;

							case 'processSubmission':
								// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ –≤–µ–±—Ö—É–∫–∞ Pachca
								const webhookData = this.getInputData();
								let formData = webhookData[i]?.json || {};
								const formType = this.getNodeParameter('formType', i) as string;
								const validationErrors = this.getNodeParameter('validationErrors', i) as any;

								console.log('=== PROCESSING FORM SUBMISSION ===');
								console.log('Webhook data:', webhookData);
								console.log('Form data:', formData);
								console.log('Form type:', formType);
								console.log('Validation errors:', validationErrors);

								// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
								const executionMode = this.getInputData()[i]?.json?.executionMode;
								console.log('Execution mode:', executionMode);
								
								// –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö
								if (executionMode === 'test') {
									console.log('Test mode detected - skipping form data validation');
									// –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
									if (!formData || Object.keys(formData).length === 0 || formData.success === true) {
										formData = {
											text: 'Test form submission',
											select: 'test_value',
											checkbox: ['test_option']
										};
										console.log('Using test form data:', formData);
									}
								} else {
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
									if (!formData || Object.keys(formData).length === 0 || formData.success === true) {
										console.log('No form data received - this might be a button click, not form submission');
										responseData = {
											status: 400,
											message: 'No form data received. This operation is for processing form submissions, not button clicks.',
											receivedData: formData
										};
										break;
									}
								}

								// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–æ—Ä–º—ã –ø–æ –ø–æ–ª—è–º
								let detectedFormType = formType;
								if (!formType || formType === 'auto') {
									// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–æ—Ä–º—ã
									if (!formData || typeof formData !== 'object') {
										detectedFormType = 'unknown';
									} else {
										const fields = Object.keys(formData);
										
										if (fields.includes('date_start') && fields.includes('date_end')) {
											detectedFormType = 'timeoff_request';
										} else if (fields.includes('rating') && fields.includes('comment')) {
											detectedFormType = 'feedback_form';
										} else if (fields.includes('task_title') && fields.includes('priority')) {
											detectedFormType = 'task_request';
										} else if (fields.includes('checkbox') || fields.includes('select') || fields.includes('text')) {
											detectedFormType = 'custom_form';
										} else {
											detectedFormType = 'unknown';
										}
									}
									console.log('Auto-detected form type:', detectedFormType);
								}

								// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
								const errors: any = {};
								if (validationErrors && typeof validationErrors === 'object' && Object.keys(validationErrors).length > 0) {
									Object.assign(errors, validationErrors);
								} else if (validationErrors && typeof validationErrors === 'string' && validationErrors !== '{}') {
									try {
										const parsedErrors = JSON.parse(validationErrors);
										if (typeof parsedErrors === 'object') {
											Object.assign(errors, parsedErrors);
										}
									} catch (e) {
										console.log('Failed to parse validation errors:', validationErrors);
									}
								}

								// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–æ—Ä–º—ã
								if (FORM_VALIDATION_RULES[detectedFormType]) {
									const rules = FORM_VALIDATION_RULES[detectedFormType];
									for (const [field, validator] of Object.entries(rules)) {
										if (formData[field] && typeof validator === 'function') {
											const error = validator(formData[field], formData);
											if (error) {
												errors[field] = error;
											}
										}
									}
								}

								// –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
								if (Object.keys(errors).length > 0) {
									console.log('Validation errors found:', errors);
									// –í–æ–∑–≤—Ä–∞—â–∞–µ–º 400 —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è Pachca
									responseData = {
										status: 400,
										errors: errors,
										formType: detectedFormType
									};
								} else {
									// –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
									console.log('Form processed successfully');
									responseData = {
										status: 200,
										message: 'Form processed successfully',
										formType: detectedFormType,
										processedData: formData
									};
								}
								break;

							case 'getTemplates':
								responseData = {
									templates: Object.keys(FORM_TEMPLATES).map(key => ({
										value: key,
										title: FORM_TEMPLATES[key].title,
										description: `–ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã: ${FORM_TEMPLATES[key].title}`
									}))
								};
								break;
						}
						break;

					default:
						throw new NodeOperationError(this.getNode(), `Resource "${resource}" not implemented yet`);
				}

				// –î–ª—è processSubmission –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTTP –æ—Ç–≤–µ—Ç –¥–ª—è Pachca
				if (resource === 'form' && operation === 'processSubmission') {
					// –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTTP –æ—Ç–≤–µ—Ç –¥–ª—è Pachca
				returnData.push({
						json: responseData || {},
					pairedItem: { item: i },
				});
				} else {
					// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
					returnData.push({
						json: responseData?.data || responseData || {},
						pairedItem: { item: i },
					});
				}
			} catch (error) {
				console.error('Error in Pachca node:', error);
				if (this.continueOnFail()) {
					returnData.push({
						json: { 
							error: (error as Error).message,
							details: String(error)
						},
						pairedItem: { item: i },
					});
				} else {
					throw error;
				}
			}
		}

		return [returnData];
}

}